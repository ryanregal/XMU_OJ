/*
icebear:四柱汉诺塔问题
①将四柱问题拆分，公式如下：f[n]=min{2*f[k]+d[n-k]}
②三柱问题时间复杂度：
  设盘数为n时，需T（n)步，得递推公式：T（k） = 2T（k - 1) + 1，T（0）=0
  对每项乘2^(n-k)有：
  2^0 * T(n)= 2^(1+0)T(n-1) + 1*2^0
  2^1 * T(n-1)= 2^(1+1)T(n-2) + 1*2^1
  2^2 * T(n-2)= 2^(1+2)T(n-3) + 1*2^2
  ……
  2^(n-1) * T(1) = 2^(1+n-1）T(0) + 1*2^(n-1)
  全部相加抵消得：T(n)=1+2^1+……2^(n-1)+2^n*T(0)=2^n-1
  即时间复杂度为2^n-1
*/

#include<stdio.h>
#include<math.h>
#define M 99999999

int  main(){
	int i, n, k, min,j;
	int f[15];//记录结果
	f[1] = 1;//移动1个盘步骤为1
	f[2] = 3;//移动2个盘步骤为3

	for (i = 3; i <= 12; i++){
		min = M;
		//对每个可能的k进行尝试
		for (k = 1; k < i; k++) {
			if (2 * f[k] + pow(2, i - k) - 1 < min)
				min = 2 * f[k] + (int)pow(2, i - k) - 1;
		}
		f[i] = min;
	}
	//输出结果
	for (j=1;j<=12;j++){
		printf("%d\n", f[j]);
	}
	return 0;
}
